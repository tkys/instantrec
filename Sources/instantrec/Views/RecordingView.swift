import SwiftUI

// MARK: - Áµ±‰∏Ä„É™„Ç¢„É´„Çø„Ç§„É†Èå≤Èü≥„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà

struct UnifiedAudioMeter: View {
    @ObservedObject var audioService: AudioService
    @ObservedObject var recordingViewModel: RecordingViewModel
    let isRecording: Bool
    let isPaused: Bool
    let showActiveAnimation: Bool
    @EnvironmentObject private var themeService: AppThemeService
    
    private let barCount = 25
    private let barSpacing: CGFloat = 2
    private let barCornerRadius: CGFloat = 1.5
    private let containerHeight: CGFloat = 60
    
    // „Éá„Éê„ÉÉ„Ç∞Áî®Áä∂ÊÖã
    @State private var debugUpdateCount: Int = 0
    
    var body: some View {
        VStack(spacing: 8) {
            // „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
            HStack {
                Circle()
                    .fill(getStatusColor())
                    .frame(width: 8, height: 8)
                    .scaleEffect(showActiveAnimation && isRecording && !isPaused ? 1.2 : 1.0)
                    .animation(.easeInOut(duration: 1.0).repeatForever(autoreverses: true), value: showActiveAnimation && isRecording && !isPaused)
                
                Text(getStatusText())
                    .font(.caption)
                    .foregroundColor(getStatusColor())
                    .fontWeight(.medium)
                
                Spacer()
                
                // Èï∑ÊôÇÈñìÈå≤Èü≥„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
                if isRecording && recordingViewModel.isLongRecording {
                    HStack(spacing: 4) {
                        Image(systemName: "clock.badge.checkmark")
                            .font(.caption2)
                            .foregroundColor(.orange)
                        Text("Long Rec")
                            .font(.caption2)
                            .foregroundColor(.orange)
                            .fontWeight(.medium)
                    }
                    .padding(.horizontal, 6)
                    .padding(.vertical, 2)
                    .background(Color.orange.opacity(0.1))
                    .cornerRadius(8)
                }
                
                // „É°„É¢„É™„Éó„É¨„ÉÉ„Ç∑„É£„Éº„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
                if isRecording && recordingViewModel.memoryPressureLevel != .normal {
                    HStack(spacing: 3) {
                        Image(systemName: getMemoryIcon())
                            .font(.caption2)
                            .foregroundColor(getMemoryColor())
                        Text(getMemoryText())
                            .font(.caption2)
                            .foregroundColor(getMemoryColor())
                            .fontWeight(.medium)
                    }
                    .padding(.horizontal, 5)
                    .padding(.vertical, 2)
                    .background(getMemoryColor().opacity(0.1))
                    .cornerRadius(6)
                }
            }
            
            // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆÈü≥Â£∞„É¨„Éô„É´„Éê„Éº
            HStack(spacing: barSpacing) {
                ForEach(0..<barCount, id: \.self) { index in
                    let barThreshold = Float(index) / Float(barCount)
                    let isActive = audioService.audioLevel > barThreshold
                    let barHeight = getBarHeight(for: index, isActive: isActive)
                    
                    RoundedRectangle(cornerRadius: barCornerRadius)
                        .fill(getBarColor(for: index, isActive: isActive))
                        .frame(width: getBarWidth(), height: barHeight)
                        .animation(.easeInOut(duration: 0.1), value: isActive)
                }
            }
            .frame(height: containerHeight)
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(themeService.currentTheme.cardBackgroundColor)
        .cornerRadius(12)
        .overlay(
            RoundedRectangle(cornerRadius: 12)
                .stroke(getStatusColor().opacity(0.2), lineWidth: 1)
        )
        .onReceive(audioService.$audioLevel) { level in
            // ÊúÄÈÅ©Âåñ„Åï„Çå„Åü„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ÔºàË≤†Ëç∑ËªΩÊ∏õÔºâ
            debugUpdateCount += 1
            if debugUpdateCount % 100 == 0 || (level > 0.1 && debugUpdateCount % 50 == 0) {
                print("üéöÔ∏è UnifiedAudioMeter update #\(debugUpdateCount): \(String(format: "%.3f", level)) - isRecording: \(isRecording)")
            }
        }
        .onAppear {
            print("üéöÔ∏è UnifiedAudioMeter appeared - isRecording: \(isRecording), isPaused: \(isPaused)")
            
            // ÂæÖÊ©üÁä∂ÊÖã„Åß„ÇÇÈü≥Â£∞„É¢„Éã„Çø„É™„É≥„Ç∞„ÇíÈñãÂßã
            if !isRecording {
                audioService.startStandbyAudioMonitoring()
            }
            
            // „Éá„Éê„ÉÉ„Ç∞: Èü≥Â£∞„É¨„Éô„É´„ÇíÂº∑Âà∂ÁöÑ„Å´Ê®°Êì¨Ôºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
            // Ê≥®ÊÑè: „Ç∑„Éü„É•„É¨„Éº„Çø„Éº„Åß„ÅØÂÆüÈöõ„ÅÆ„Éû„Ç§„ÇØÈü≥Â£∞„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅAudioService„ÅÆ
            // „Ç∑„Éü„É•„É¨„Éº„ÉàÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„ÇãÔºàÂÆüÊ©ü„Åß„ÅØËá™ÂãïÁöÑ„Å´ÁÑ°ÂäπÂåñ„Åï„Çå„ÇãÔºâ
            if isRecording {
                // startMockAudioLevelForTesting() // ‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ
            }
        }
        .onDisappear {
            // ÂæÖÊ©üÁä∂ÊÖã„ÅÆÈü≥Â£∞„É¢„Éã„Çø„É™„É≥„Ç∞„ÇíÂÅúÊ≠¢
            if !isRecording {
                audioService.stopStandbyAudioMonitoring()
            }
        }
    }
    
    private func getStatusColor() -> Color {
        if isPaused {
            return AppTheme.universalPauseColor
        } else if isRecording {
            return AppTheme.universalRecordColor
        } else {
            return themeService.currentTheme.readyStateColor
        }
    }
    
    private func getStatusText() -> String {
        if isPaused {
            return "Paused"
        } else if isRecording {
            return "Recording"
        } else {
            return "Ready"
        }
    }
    
    private func getBarWidth() -> CGFloat {
        return 3.0
    }
    
    private func getBarHeight(for index: Int, isActive: Bool) -> CGFloat {
        let baseHeight: CGFloat = 4
        let maxHeight: CGFloat = containerHeight - 16
        
        if !isActive {
            return baseHeight
        }
        
        // ‰∏≠Â§Æ„Å´Âêë„Åã„Å£„Å¶È´ò„Åè„Å™„Çã„Ç´„Éº„Éñ
        let centerIndex = Float(barCount) / 2.0
        let distanceFromCenter = abs(Float(index) - centerIndex)
        let normalizedDistance = distanceFromCenter / centerIndex
        let heightMultiplier = 1.0 - (normalizedDistance * 0.3) // Á´Ø„ÅØ30%‰Ωé„Åè
        
        let dynamicHeight = baseHeight + (maxHeight - baseHeight) * CGFloat(heightMultiplier) * CGFloat(audioService.audioLevel)
        return min(maxHeight, max(baseHeight, dynamicHeight))
    }
    
    private func getBarColor(for index: Int, isActive: Bool) -> Color {
        if !isActive {
            return getStatusColor().opacity(0.2)
        }
        
        let intensity = audioService.audioLevel
        
        // ÂÆüÊ©ü„Åß„ÅÆÂæÆÁ¥∞„Å™Èü≥Â£∞„É¨„Éô„É´„ÇÇË¶ñË¶öÂåñÔºàÊÑüÂ∫¶Âêë‰∏äÔºâ
        if intensity > 0.6 {
            return AppTheme.universalRecordColor // Ëµ§ÔºàÈ´òÈü≥ÈáèÔºâ
        } else if intensity > 0.3 {
            return AppTheme.universalPauseColor // „Ç™„É¨„É≥„Ç∏Ôºà‰∏≠Èü≥ÈáèÔºâ
        } else if intensity > 0.05 {
            return Color.green // Á∑ëÔºà‰ΩéÈü≥Èáè„ÇÇË°®Á§∫Ôºâ
        } else {
            return getStatusColor().opacity(0.6) // „Çπ„ÉÜ„Éº„Çø„ÇπËâ≤ÔºàÂæÆÂº±Èü≥Â£∞Ôºâ
        }
    }
    
    // MARK: - Long Recording Indicators
    
    private func getMemoryIcon() -> String {
        switch recordingViewModel.memoryPressureLevel {
        case .warning:
            return "exclamationmark.triangle"
        case .critical:
            return "exclamationmark.triangle.fill"
        default:
            return "checkmark.circle"
        }
    }
    
    private func getMemoryColor() -> Color {
        switch recordingViewModel.memoryPressureLevel {
        case .warning:
            return .orange
        case .critical:
            return .red
        default:
            return .green
        }
    }
    
    private func getMemoryText() -> String {
        switch recordingViewModel.memoryPressureLevel {
        case .warning:
            return "Mem"
        case .critical:
            return "High"
        default:
            return "OK"
        }
    }
    
    // MARK: - „Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ
    
    private func startMockAudioLevelForTesting() {
        // Èå≤Èü≥‰∏≠„ÅÆ„ÉÜ„Çπ„ÉàÁî®Èü≥Â£∞„É¨„Éô„É´Ê®°Êì¨
        print("üß™ Starting mock audio level testing for recording...")
        
        Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { timer in
            guard isRecording else {
                timer.invalidate()
                print("üß™ Mock audio level timer invalidated")
                return
            }
            
            // „É©„É≥„ÉÄ„É†„Å™Èü≥Â£∞„É¨„Éô„É´„ÇíÁîüÊàêÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
            let mockLevel = Float.random(in: 0.2...1.0) // ÊúÄ‰Ωé0.2„ÅßÁ¢∫ÂÆü„Å´Ë°®Á§∫
            audioService.setTestAudioLevel(mockLevel)
            print("üß™ Mock audio level set: \(String(format: "%.3f", mockLevel))")
        }
    }
}

struct LazyRecordingInterface: View {
    let isRecording: Bool
    let elapsedTime: String
    @ObservedObject var audioService: AudioService
    @ObservedObject var viewModel: RecordingViewModel
    let stopAction: () -> Void
    let isManualStart: Bool
    
    @State private var showFullInterface = false
    @EnvironmentObject private var themeService: AppThemeService
    
    var body: some View {
        VStack(spacing: 30) {
            if showFullInterface {
                // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆ„Éï„É´„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
                VStack(spacing: 8) {
                    HStack {
                        Circle()
                            .fill(AppTheme.universalRecordColor)
                            .frame(width: 12, height: 12)
                            .opacity(0.8)
                            .scaleEffect(1.1)
                            .animation(Animation.easeInOut(duration: 1.0).repeatForever(autoreverses: true), value: true)
                        
                        Text("Recording")
                            .foregroundColor(AppTheme.universalRecordColor)
                            .font(.title2)
                            .fontWeight(.bold)
                    }
                }
                
                VStack(spacing: 15) {
                    Image(systemName: "waveform")
                        .font(.system(size: 60))
                        .foregroundColor(AppTheme.universalRecordColor)
                    
                    // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆÈå≤Èü≥„Éê„Éº
                    UnifiedAudioMeter(
                        audioService: audioService,
                        recordingViewModel: viewModel,
                        isRecording: true,
                        isPaused: viewModel.isPaused,
                        showActiveAnimation: true
                    )
                    .frame(height: 80)
                    
                    Group {
                        if viewModel.isLongRecording {
                            Text("Long recording mode active")
                                .foregroundColor(.orange)
                                .font(.subheadline)
                                .fontWeight(.medium)
                        } else {
                            Text("Processing audio")
                                .foregroundColor(Color(UIColor.secondaryLabel))
                                .font(.subheadline)
                        }
                    }
                }
                
                VStack(spacing: 4) {
                    Text(elapsedTime)
                        .font(.system(.largeTitle, design: .monospaced, weight: .light))
                        .foregroundColor(Color(UIColor.label))
                    
                    // Èï∑ÊôÇÈñìÈå≤Èü≥ÊôÇ„ÅÆË©≥Á¥∞ÊÉÖÂ†±Ë°®Á§∫
                    if viewModel.isLongRecording {
                        HStack(spacing: 16) {
                            // „É°„É¢„É™‰ΩøÁî®Èáè
                            HStack(spacing: 4) {
                                Image(systemName: "memorychip")
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                Text(formatMemoryUsage(viewModel.memoryUsage))
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                    .fontWeight(.medium)
                            }
                            
                            // Èå≤Èü≥ÊôÇÈñì
                            HStack(spacing: 4) {
                                Image(systemName: "clock")
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                Text(formatDuration(viewModel.recordingDuration))
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                    .fontWeight(.medium)
                            }
                        }
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .background(Color(UIColor.secondarySystemFill))
                        .cornerRadius(8)
                    }
                }
                
                // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆÈå≤Èü≥„Ç≥„É≥„Éà„É≠„Éº„É´
                HStack(spacing: 24) {
                    // Á†¥Ê£Ñ„Éú„Çø„É≥
                    Button(action: { 
                        viewModel.discardRecording()
                    }) {
                        VStack(spacing: 8) {
                            Image(systemName: "trash.fill")
                                .font(.title2)
                            Text("Discard")
                                .font(.caption)
                        }
                        .foregroundColor(AppTheme.universalDiscardColor)
                        .frame(width: 80, height: 80)
                        .background(AppTheme.universalDiscardColor.opacity(0.1))
                        .cornerRadius(20)
                    }
                    
                    // ‰∏ÄÊôÇÂÅúÊ≠¢/ÂÜçÈñã„Éú„Çø„É≥
                    Button(action: { 
                        viewModel.togglePauseResume()
                    }) {
                        VStack(spacing: 8) {
                            Image(systemName: viewModel.isPaused ? "play.fill" : "pause.fill")
                                .font(.title2)
                            Text(viewModel.isPaused ? "Resume" : "Pause")
                                .font(.caption)
                        }
                        .foregroundColor(AppTheme.universalPauseColor)
                        .frame(width: 80, height: 80)
                        .background(AppTheme.universalPauseColor.opacity(0.1))
                        .cornerRadius(20)
                    }
                    
                    // ÂÅúÊ≠¢„Éú„Çø„É≥Ôºà‰øùÂ≠òÔºâ
                    Button(action: stopAction) {
                        VStack(spacing: 8) {
                            Image(systemName: "stop.fill")
                                .font(.title2)
                            Text("Save")
                                .font(.caption)
                        }
                        .foregroundColor(AppTheme.universalStopColor)
                        .frame(width: 80, height: 80)
                        .background(AppTheme.universalStopColor.opacity(0.1))
                        .cornerRadius(20)
                    }
                }
            } else {
                // Ë∂ÖËªΩÈáè„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÔºàÂç≥Â∫ß„Å´Ë°®Á§∫Ôºâ
                Text("REC")
                    .font(.title)
                    .foregroundColor(AppTheme.universalRecordColor)
                    .fontWeight(.bold)
            }
        }
        .onAppear {
            // Â∏∏„Å´Âç≥Â∫ß„Å´„Éï„É´„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÇíË°®Á§∫Ôºà„Éú„Çø„É≥„ÅåË¶ã„Åà„Çã„Çà„ÅÜ„Å´Ôºâ
            showFullInterface = true
        }
    }
    
    // MARK: - Helper Functions
    
    private func formatMemoryUsage(_ bytes: UInt64) -> String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useMB]
        formatter.countStyle = .memory
        return formatter.string(fromByteCount: Int64(bytes))
    }
    
    private func formatDuration(_ duration: TimeInterval) -> String {
        let hours = Int(duration) / 3600
        let minutes = Int(duration) % 3600 / 60
        let seconds = Int(duration) % 60
        
        if hours > 0 {
            return String(format: "%dh %dm", hours, minutes)
        } else {
            return String(format: "%dm %ds", minutes, seconds)
        }
    }
}

struct RecordingView: View {
    @EnvironmentObject private var viewModel: RecordingViewModel
    @EnvironmentObject private var themeService: AppThemeService
    // Note: AppStateManager integration commented out for now to resolve compilation
    // @EnvironmentObject private var appState: AppStateManager
    @StateObject private var recordingSettings = RecordingSettings.shared
    @State private var showingSettings = false

    var body: some View {
        ZStack {
            Color(UIColor.systemBackground).ignoresSafeArea()
            
            // Full-screen tap area
            Rectangle()
                .fill(Color.clear)
                .contentShape(Rectangle())
                .onTapGesture {
                    Task {
                        await handleRecordingTapAsync()
                    }
                }
            
            VStack(spacing: 40) {
                switch viewModel.permissionStatus {
                case .unknown:
                    // Á©∫ÁôΩÔºàÊúÄËªΩÈáèÔºâ
                    EmptyView()
                    
                case .denied:
                    VStack {
                        Image(systemName: "mic.slash.fill")
                            .font(.system(size: 60))
                            .foregroundColor(.red)
                        Text("microphone_permission_message")
                            .foregroundColor(Color(UIColor.label))
                            .font(.title2)
                            .multilineTextAlignment(.center)
                        Button("open_settings") {
                            if let settingsUrl = URL(string: UIApplication.openSettingsURLString) {
                                UIApplication.shared.open(settingsUrl)
                            }
                        }
                        .foregroundColor(.blue)
                        .font(.headline)
                        .padding()
                    }
                    
                case .granted:
                    if viewModel.isRecording {
                        VStack(spacing: 20) {
                            LazyRecordingInterface(
                                isRecording: viewModel.isRecording,
                                elapsedTime: viewModel.elapsedTime,
                                audioService: viewModel.audioService,
                                viewModel: viewModel,
                                stopAction: { 
                                    Task {
                                        await stopRecordingWithTranscription()
                                    }
                                },
                                isManualStart: (viewModel.showManualRecordButton == false && recordingSettings.recordingStartMode == .manual)
                            )
                            
                            // Á∑äÊÄ•Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏
                            if viewModel.memoryPressureLevel == .critical {
                                HStack(spacing: 8) {
                                    Image(systemName: "exclamationmark.triangle.fill")
                                        .foregroundColor(.red)
                                    Text("High memory usage detected")
                                        .font(.caption)
                                        .foregroundColor(.red)
                                        .fontWeight(.medium)
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.red.opacity(0.1))
                                .cornerRadius(8)
                                .overlay(
                                    RoundedRectangle(cornerRadius: 8)
                                        .stroke(Color.red.opacity(0.3), lineWidth: 1)
                                )
                            }
                        }
                    } else if viewModel.showManualRecordButton {
                        // ÊâãÂãïÈå≤Èü≥ÂæÖÊ©üÁîªÈù¢ÔºàÁµ±‰∏Ä„Éá„Ç∂„Ç§„É≥Ôºâ
                        VStack(spacing: 30) {
                            VStack(spacing: 8) {
                                HStack {
                                    Circle()
                                        .fill(themeService.currentTheme.readyStateColor)
                                        .frame(width: 12, height: 12)
                                        .opacity(0.8)
                                    
                                    Text("Ready to Record")
                                        .foregroundColor(themeService.currentTheme.readyStateColor)
                                        .font(.title2)
                                        .fontWeight(.bold)
                                }
                            }
                            
                            VStack(spacing: 15) {
                                Image(systemName: "mic")
                                    .font(.system(size: 60))
                                    .foregroundColor(themeService.currentTheme.readyStateColor)
                                
                                Text("Tap the button to start recording")
                                    .foregroundColor(Color(UIColor.secondaryLabel))
                                    .font(.subheadline)
                            }
                            
                            // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆÂæÖÊ©üÁä∂ÊÖãÈå≤Èü≥„Éê„Éº
                            UnifiedAudioMeter(
                                audioService: viewModel.audioService,
                                recordingViewModel: viewModel,
                                isRecording: false,
                                isPaused: false,
                                showActiveAnimation: false
                            )
                            .frame(height: 80)
                            
                            Text("--:--")
                                .font(.system(.largeTitle, design: .monospaced, weight: .light))
                                .foregroundColor(Color(UIColor.secondaryLabel))
                            
                            Button(action: { 
                                Task {
                                    await startRecordingWithTranscription(manual: true)
                                }
                            }) {
                                HStack {
                                    Image(systemName: "record.circle.fill")
                                    Text("Start Recording")
                                }
                                .font(.title)
                                .fontWeight(.semibold)
                                .foregroundColor(.white)
                                .frame(width: 200, height: 80)
                                .background(AppTheme.universalRecordColor)
                                .cornerRadius(40)
                            }
                        }
                    } else {
                        // Âç≥Â∫ßÈå≤Èü≥ÂæÖÊ©üÁä∂ÊÖãÔºàÁµ±‰∏Ä„Éá„Ç∂„Ç§„É≥Ôºâ
                        VStack(spacing: 30) {
                            VStack(spacing: 8) {
                                HStack {
                                    Circle()
                                        .fill(themeService.currentTheme.readyStateColor)
                                        .frame(width: 12, height: 12)
                                        .opacity(0.8)
                                    
                                    Text("Ready to Record")
                                        .foregroundColor(themeService.currentTheme.readyStateColor)
                                        .font(.title2)
                                        .fontWeight(.bold)
                                }
                            }
                            
                            VStack(spacing: 15) {
                                Image(systemName: "waveform")
                                    .font(.system(size: 60))
                                    .foregroundColor(themeService.currentTheme.readyStateColor)
                                
                                Text("Tap anywhere to start recording")
                                    .foregroundColor(Color(UIColor.secondaryLabel))
                                    .font(.subheadline)
                            }
                            
                            // Áµ±‰∏Ä„Éá„Ç∂„Ç§„É≥„ÅÆÂæÖÊ©üÁä∂ÊÖãÈå≤Èü≥„Éê„Éº
                            UnifiedAudioMeter(
                                audioService: viewModel.audioService,
                                recordingViewModel: viewModel,
                                isRecording: false,
                                isPaused: false,
                                showActiveAnimation: false
                            )
                            .frame(height: 80)
                        }
                    }
                }
            }
            
            // „Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥Ê©üËÉΩÂâäÈô§
        }
        .onAppear {
            print("üé¨ RecordingView onAppear - permission: \(viewModel.permissionStatus), isRecording: \(viewModel.isRecording)")
            
            // „Ç¢„Éó„É™Ëµ∑ÂãïÊôÇ„Å™„Å©„ÅßÊ®©ÈôêÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Å™Â†¥Âêà
            if viewModel.permissionStatus == .unknown {
                print("üîê Permission unknown, checking permissions")
                viewModel.checkPermissions()
            }
            
            // ÊâãÂãïÈñãÂßã„É¢„Éº„Éâ„ÅÆÁä∂ÊÖã„ÇíÊõ¥Êñ∞
            if recordingSettings.recordingStartMode == .manual && !viewModel.isRecording {
                viewModel.showManualRecordButton = true
            }
        }
        .onDisappear {
            // ÂæÖÊ©üÁä∂ÊÖã„ÅÆÈü≥Â£∞„É¢„Éã„Çø„É™„É≥„Ç∞„ÇíÂÅúÊ≠¢
            if !viewModel.isRecording {
                viewModel.audioService.stopStandbyAudioMonitoring()
            }
        }
        .onChange(of: recordingSettings.recordingStartMode) { _, _ in
            print("üîß RecordingStartMode changed, updating UI state")
            viewModel.updateUIForSettingsChange()
        }
        .alert("Èå≤Èü≥„Ç®„É©„Éº", isPresented: $viewModel.showingErrorAlert) {
            if viewModel.canRetryOperation {
                Button("ÂÜçË©¶Ë°å") {
                    viewModel.retryLastOperation()
                }
                Button("Èñâ„Åò„Çã") {
                    viewModel.clearError()
                }
            } else {
                Button("OK") {
                    viewModel.clearError()
                }
            }
        } message: {
            Text(viewModel.errorMessage ?? "‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü")
        }
    }
    
    // MARK: - Actions
    
    private func handleRecordingTap() {
        print("üéØ Full-screen tap detected - isRecording: \(viewModel.isRecording)")
        
        if viewModel.isRecording {
            // Stop recording
            viewModel.stopRecording()
            
            // Trigger post-recording processing via AppStateManager
            // Note: Recording processing will be handled by the ViewModel
            // Auto-processing features will be triggered from recording completion
        } else {
            // Start recording based on mode (simplified)
            viewModel.startManualRecording()
        }
    }
    
    // MARK: - Async Recording Methods with Realtime Transcription
    
    private func handleRecordingTapAsync() async {
        print("üéØ Async full-screen tap detected - isRecording: \(viewModel.isRecording)")
        
        if viewModel.isRecording {
            await stopRecordingWithTranscription()
        } else {
            await startRecordingWithTranscription(manual: false)
        }
    }
    
    private func startRecordingWithTranscription(manual: Bool) async {
        if manual {
            viewModel.startManualRecording()
        } else {
            // Èå≤Èü≥ÈñãÂßãÔºàÊâãÂãï„É¢„Éº„Éâ„ÅÆ„ÅøÔºâ
            viewModel.startManualRecording()
        }
    }
    
    private func stopRecordingWithTranscription() async {
        // Èå≤Èü≥ÂÅúÊ≠¢
        viewModel.stopRecording()
    }
}

// MARK: - UI„É¨„Çπ„Éù„É≥„Ç∑„ÉñÊÄßÊúÄÈÅ©Âåñ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà

/// ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÈï∑ÊôÇÈñìÈå≤Èü≥ÊÉÖÂ†±Ë°®Á§∫
struct OptimizedLongRecordingInfoView: View {
    let memoryUsage: UInt64
    let recordingDuration: TimeInterval
    let updateCounter: Int
    
    var body: some View {
        // Èáç„ÅÑUIÊõ¥Êñ∞„ÇíÈñìÂºï„Åç„Åó„Å¶„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂêë‰∏ä
        if updateCounter % 5 == 0 {  // 5ÁßíÈñìÈöî„ÅßÊõ¥Êñ∞
            HStack(spacing: 16) {
                // „É°„É¢„É™‰ΩøÁî®Èáè
                HStack(spacing: 4) {
                    Image(systemName: "memorychip")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                    Text(formatMemoryUsage(memoryUsage))
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .fontWeight(.medium)
                }
                
                // Èå≤Èü≥ÊôÇÈñì
                HStack(spacing: 4) {
                    Image(systemName: "clock")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                    Text(formatDuration(recordingDuration))
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .fontWeight(.medium)
                }
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 6)
            .background(Color(UIColor.secondarySystemFill))
            .cornerRadius(8)
        } else {
            // Êõ¥Êñ∞Èó¥Èöî‰∏≠„ÅØÂâçÂõû„ÅÆË°®Á§∫„ÇíÁ∂≠ÊåÅÔºàËªΩÈáè„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„ÉºÔºâ
            HStack(spacing: 16) {
                HStack(spacing: 4) {
                    Image(systemName: "memorychip")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                    Text("‚Ä¢‚Ä¢‚Ä¢")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .fontWeight(.medium)
                }
                
                HStack(spacing: 4) {
                    Image(systemName: "clock")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                    Text("‚Ä¢‚Ä¢‚Ä¢")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                        .fontWeight(.medium)
                }
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 6)
            .background(Color(UIColor.secondarySystemFill))
            .cornerRadius(8)
        }
    }
    
    // MARK: - Helper Functions
    
    private func formatMemoryUsage(_ bytes: UInt64) -> String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useMB]
        formatter.countStyle = .memory
        return formatter.string(fromByteCount: Int64(bytes))
    }
    
    private func formatDuration(_ duration: TimeInterval) -> String {
        let hours = Int(duration) / 3600
        let minutes = Int(duration) % 3600 / 60
        let seconds = Int(duration) % 60
        
        if hours > 0 {
            return String(format: "%dh %dm", hours, minutes)
        } else {
            return String(format: "%dm %ds", minutes, seconds)
        }
    }
}

// MARK: - Êóß„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂâäÈô§„Åó„Å¶UnifiedAudioMeter„Å´Áµ±‰∏Ä