import SwiftUI

struct SettingsView: View {
    @StateObject private var settings = RecordingSettings.shared
    @StateObject private var googleDriveService = GoogleDriveService.shared
    @StateObject private var uploadQueue = UploadQueue.shared
    @Environment(\.dismiss) private var dismiss
    @State private var showingModeChangeAlert = false
    @State private var pendingMode: RecordingStartMode?
    @State private var showingSignInAlert = false
    @State private var showingSignOutAlert = false
    
    var body: some View {
        NavigationView {
            Form {
                // Èå≤Èü≥ÊñπÂºèË®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥
                Section(header: Text("Èå≤Èü≥ÈñãÂßãÊñπÂºè")) {
                    ForEach(RecordingStartMode.allCases) { mode in
                        Button(action: {
                            if mode == .instantStart && !settings.userConsentForInstantRecording {
                                pendingMode = mode
                                showingModeChangeAlert = true
                            } else {
                                settings.recordingStartMode = mode
                            }
                        }) {
                            HStack {
                                Image(systemName: mode.icon)
                                    .foregroundColor(.blue)
                                    .frame(width: 24)
                                
                                VStack(alignment: .leading, spacing: 2) {
                                    Text(mode.displayName)
                                        .foregroundColor(.primary)
                                        .fontWeight(.medium)
                                    
                                    Text(mode.description)
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                        .multilineTextAlignment(.leading)
                                }
                                
                                Spacer()
                                
                                if settings.recordingStartMode == mode {
                                    Image(systemName: "checkmark")
                                        .foregroundColor(.blue)
                                }
                            }
                        }
                        .buttonStyle(PlainButtonStyle())
                    }
                }
                
                // „Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥Ë®≠ÂÆöÔºà„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥ÊñπÂºèÈÅ∏ÊäûÊôÇ„ÅÆ„ÅøË°®Á§∫Ôºâ
                if settings.recordingStartMode == .countdown {
                    Section(header: Text("„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥ÊôÇÈñì")) {
                        Picker("„Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥ÊôÇÈñì", selection: $settings.countdownDuration) {
                            ForEach(CountdownDuration.allCases) { duration in
                                Text(duration.displayName)
                                    .tag(duration)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                    }
                }
                
                // Google DriveÈÄ£Êê∫Ë®≠ÂÆö
                Section(header: Text("Google DriveÈÄ£Êê∫")) {
                    if googleDriveService.isAuthenticated {
                        // „Çµ„Ç§„É≥„Ç§„É≥Ê∏à„ÅøÁä∂ÊÖã
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text("Êé•Á∂öÊ∏à„Åø")
                                    .foregroundColor(.primary)
                                    .fontWeight(.medium)
                                
                                if let email = googleDriveService.currentUserEmail {
                                    Text("ÈÄ£Êê∫‰∏≠: \(email)")
                                        .font(.caption)
                                        .foregroundColor(.green)
                                        .fontWeight(.medium)
                                }
                                
                                if let name = googleDriveService.currentUserName {
                                    Text("„Ç¢„Ç´„Ç¶„É≥„Éà: \(name)")
                                        .font(.caption2)
                                        .foregroundColor(.secondary)
                                }
                                
                                Text("Èå≤Èü≥„Éï„Ç°„Ç§„É´„ÅåËá™Âãï„ÅßGoogle Drive„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åô")
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                        }
                        
                        // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç≠„É•„ÉºÁä∂Ê≥Å
                        if uploadQueue.queueCount > 0 || uploadQueue.activeUploads > 0 {
                            HStack {
                                Image(systemName: "icloud.and.arrow.up")
                                    .foregroundColor(.blue)
                                
                                VStack(alignment: .leading, spacing: 2) {
                                    Text("„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁä∂Ê≥Å")
                                        .foregroundColor(.primary)
                                        .fontWeight(.medium)
                                    
                                    if uploadQueue.activeUploads > 0 {
                                        Text("„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠: \(uploadQueue.activeUploads)‰ª∂")
                                            .font(.caption)
                                            .foregroundColor(.blue)
                                    }
                                    
                                    if uploadQueue.queueCount > 0 {
                                        Text("ÂæÖÊ©ü‰∏≠: \(uploadQueue.queueCount)‰ª∂")
                                            .font(.caption)
                                            .foregroundColor(.orange)
                                    }
                                }
                                
                                Spacer()
                            }
                        }
                        
                        // „Çµ„Ç§„É≥„Ç¢„Ç¶„Éà„Éú„Çø„É≥
                        Button(action: {
                            showingSignOutAlert = true
                        }) {
                            HStack {
                                Image(systemName: "person.crop.circle.badge.minus")
                                    .foregroundColor(.red)
                                
                                Text("„Çµ„Ç§„É≥„Ç¢„Ç¶„Éà")
                                    .foregroundColor(.red)
                            }
                        }
                        
                    } else {
                        // Êú™„Çµ„Ç§„É≥„Ç§„É≥Áä∂ÊÖã
                        VStack(alignment: .leading, spacing: 8) {
                            HStack {
                                Image(systemName: "icloud.slash")
                                    .foregroundColor(.gray)
                                
                                Text("Êú™Êé•Á∂ö")
                                    .foregroundColor(.primary)
                                    .fontWeight(.medium)
                                
                                Spacer()
                            }
                            
                            Text("Google Drive„Å´Êé•Á∂ö„Åô„Çã„Å®„ÄÅÈå≤Èü≥„Éï„Ç°„Ç§„É´„ÅåËá™Âãï„Åß„ÇØ„É©„Ç¶„Éâ„Å´‰øùÂ≠ò„Åï„Çå„ÄÅ„Å©„ÅÆ„Éá„Éê„Ç§„Çπ„Åã„Çâ„Åß„ÇÇ„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åô„ÄÇ")
                                .font(.caption)
                                .foregroundColor(.secondary)
                                .multilineTextAlignment(.leading)
                        }
                        
                        // „Çµ„Ç§„É≥„Ç§„É≥„Éú„Çø„É≥
                        Button(action: {
                            showingSignInAlert = true
                        }) {
                            HStack {
                                Image(systemName: "person.crop.circle.badge.plus")
                                    .foregroundColor(.blue)
                                
                                Text("Google Drive„Å´Êé•Á∂ö")
                                    .foregroundColor(.blue)
                                    .fontWeight(.medium)
                                
                                Spacer()
                            }
                        }
                    }
                }
                
                // „Éá„Éê„ÉÉ„Ç∞„Çª„ÇØ„Ç∑„Éß„É≥
                Section(header: Text("üî¨ „Éá„Éê„ÉÉ„Ç∞")) {
                    NavigationLink {
                        TranscriptionDebugView()
                    } label: {
                        HStack {
                            Image(systemName: "waveform.and.mic")
                                .foregroundColor(.purple)
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text("ÊñáÂ≠óËµ∑„Åì„Åó„ÉÜ„Çπ„Éà")
                                    .foregroundColor(.primary)
                                    .fontWeight(.medium)
                                
                                Text("Apple Speech Framework POC")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            
                            Spacer()
                        }
                    }
                }
                
                // „Åù„ÅÆ‰ªñË®≠ÂÆö
                Section(header: Text("„Åù„ÅÆ‰ªñ")) {
                    HStack {
                        Image(systemName: "info.circle")
                            .foregroundColor(.blue)
                        
                        Text("„Éê„Éº„Ç∏„Éß„É≥")
                        
                        Spacer()
                        
                        Text("1.0.0")
                            .foregroundColor(.secondary)
                    }
                    
                    Button(action: {
                        // „É™„Çª„ÉÉ„ÉàÊ©üËÉΩÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
                        settings.recordingStartMode = .manual
                        settings.userConsentForInstantRecording = false
                        settings.countdownDuration = .three
                        settings.isFirstLaunch = true
                    }) {
                        HStack {
                            Image(systemName: "arrow.clockwise")
                                .foregroundColor(.orange)
                            
                            Text("Ë®≠ÂÆö„Çí„É™„Çª„ÉÉ„Éà")
                                .foregroundColor(.primary)
                        }
                    }
                }
                
                // AppleÂØ©ÊüªÂØæÁ≠ñ„ÅÆË™¨Êòé
                Section(footer: Text("Èå≤Èü≥ÈñãÂßãÊñπÂºè„ÅØ„ÄÅApple„Çπ„Éà„Ç¢„Éù„É™„Ç∑„Éº„Å´Ê∫ñÊã†„Åô„Çã„Åü„ÇÅÈÅ∏ÊäûÂèØËÉΩ„Å´„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ„ÅÑ„Å§„Åß„ÇÇÂ§âÊõ¥„Åß„Åç„Åæ„Åô„ÄÇ")) {
                    EmptyView()
                }
            }
            .navigationTitle("Ë®≠ÂÆö")
            .navigationBarTitleDisplayMode(.inline)
            .navigationBarBackButtonHidden(true)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("ÂÆå‰∫Ü") {
                        dismiss()
                    }
                }
            }
        }
        .alert("Âç≥Èå≤Èü≥ÊñπÂºè„ÅÆÁ¢∫Ë™ç", isPresented: $showingModeChangeAlert) {
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { 
                pendingMode = nil
            }
            Button("ÂêåÊÑè„Åó„Å¶Â§âÊõ¥") {
                if let mode = pendingMode {
                    settings.userConsentForInstantRecording = true
                    settings.recordingStartMode = mode
                    pendingMode = nil
                }
            }
        } message: {
            Text("Âç≥Èå≤Èü≥ÊñπÂºè„Åß„ÅØ„ÄÅ„Ç¢„Éó„É™„ÇíÈñã„Åè„Å®ÂêåÊôÇ„Å´Èå≤Èü≥„ÅåÈñãÂßã„Åï„Çå„Åæ„Åô„ÄÇ„Åì„ÅÆÂãï‰Ωú„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÅãÔºü")
        }
        .alert("Google Drive„Å´Êé•Á∂ö", isPresented: $showingSignInAlert) {
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
            Button("Êé•Á∂ö„Åô„Çã") {
                Task {
                    do {
                        try await googleDriveService.signIn()
                    } catch {
                        print("‚ùå Google Drive sign-in failed: \(error)")
                    }
                }
            }
        } message: {
            Text("Google Drive„Å´Êé•Á∂ö„Åó„Å¶„ÄÅÈå≤Èü≥„Éï„Ç°„Ç§„É´„ÇíËá™Âãï„Åß„ÇØ„É©„Ç¶„Éâ„Å´‰øùÂ≠ò„Åó„Åæ„Åô„ÅãÔºü")
        }
        .alert("Google Drive„Åã„ÇâÂàáÊñ≠", isPresented: $showingSignOutAlert) {
            Button("„Ç≠„É£„É≥„Çª„É´", role: .cancel) { }
            Button("ÂàáÊñ≠„Åô„Çã", role: .destructive) {
                googleDriveService.signOut()
            }
        } message: {
            Text("Google Drive„Åã„ÇâÂàáÊñ≠„Åó„Åæ„Åô„ÅãÔºüÊó¢„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊ∏à„Åø„ÅÆ„Éï„Ç°„Ç§„É´„ÅØGoogle Drive‰∏ä„Å´ÊÆã„Çä„Åæ„Åô„ÄÇ")
        }
    }
}

#Preview {
    SettingsView()
}